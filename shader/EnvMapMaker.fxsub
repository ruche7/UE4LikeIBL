/// @file
/// @brief このエフェクトを中心にキューブ環境マップをレンダリングする。
/// @author ruche
///
/// ルートディレクトリから include される前提で記述されている。
///
/// UE4LIKEIBL_ENVMAP_ID を環境マップテクスチャIDとする。
/// 未定義ならば 0 で定義される。

#include "shader/common.h"

// UE4LIKEIBL_ENVMAP_ID 定義
#ifndef UE4LIKEIBL_ENVMAP_ID
#define UE4LIKEIBL_ENVMAP_ID 0
#endif // UE4LIKEIBL_ENVMAP_ID

/// Equirectangular projection マップへの変換用テクスチャを用いるか否か。
#define UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED 1

////////////////////////////////////////
// 変数定義

/// エフェクト定義。
float Script : STANDARDSGLOBAL <
    string ScriptOutput = "color";
    string ScriptClass = "scene";
    string ScriptOrder = "postprocess";
> = 0.8f;

/// 環境マップのオフスクリーンレンダーターゲットの縦横幅。
#define UE4LIKEIBL_EVNMAP_RT_WH ((UE4LIKEIBL_ENVMAP_SIZE) / (UE4LIKEIBL_ENVMAP_CUBE_SCALE))

/// 環境マップのオフスクリーンレンダーターゲット。
texture EnvMapRT : OFFSCREENRENDERTARGET <
    string Description = "環境マップのレンダーターゲット";
    int Width = UE4LIKEIBL_EVNMAP_RT_WH;
    int Height = UE4LIKEIBL_EVNMAP_RT_WH;
    float4 ClearColor = float4(0, 0, 0, 0);
    float ClearDepth = 1;
    string Format = UE4LIKEIBL_ENVMAP_FORMAT;
    bool AntiAlias = false;
    int Miplevels = 1;
    string DefaultEffect =
        "self=hide;"
        "*=shader/EnvMapRT.fxm;"; >;

/// 環境マップのオフスクリーンレンダーターゲットのサンプラ。
sampler EnvMapRTSampler =
    sampler_state
    {
        Texture = <EnvMapRT>;
        MinFilter = POINT;
        MagFilter = POINT;
        AddressU = WRAP;
        AddressV = CLAMP;
    };

// 環境マップのコピー先テクスチャ＆サンプラ定義
UE4LIKEIBL_ENVMAP_DEF(UE4LIKEIBL_ENVMAP_ID);

/// 深度ステンシルバッファ。
texture DepthBuffer : RENDERDEPTHSTENCILTARGET <
    float2 ViewportRatio = float2(1, 1); >;

/// クリア色。
float4 ClearColor = float4(0, 0, 0, 1);

/// クリア深度値。
float ClearDepth = 1;

#if UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED

/// Equirectangular projection マップへの変換用テクスチャ。
texture2D ULI_CubeTransTexture <
    string ResourceName = UE4LIKEIBL_ENVMAP_TRANS_TEX_NAME; >;

/// Equirectangular projection マップへの変換用テクスチャのサンプラ。
sampler ULI_CubeTransTexSampler =
    sampler_state
    {
        Texture = <ULI_CubeTransTexture>;
        MinFilter = POINT;
        MagFilter = POINT;
        AddressU = WRAP;
        AddressV = CLAMP;
    };

#endif // UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED

////////////////////////////////////////
// シェーダ処理

/// 頂点シェーダ出力構造体。
struct VSOutput
{
    float4 pos : POSITION;
    float2 tex : TEXCOORD0;
};

/// 頂点シェーダ処理を行う。
VSOutput RunVS(MMM_SKINNING_INPUT IN)
{
    VSOutput vsOut = (VSOutput)0;

    vsOut.pos = IN.Pos;
    vsOut.tex = IN.Tex;

    return vsOut;
}

/// ピクセルシェーダ処理を行う。
float4 RunPS(float2 tex : TEXCOORD0) : COLOR
{
    // オフスクリーンレンダーターゲットには下記のようなキューブマップが貼られている。
    //
    // |  |+Y|  |  |
    // |-X|+Z|+X|-Z|
    // |  |-Y|  |  |
    // |  |  |  |  |
    //
    // コピー先テクスチャが Equirectangular projection となるようにサンプリングする。
    // コピー先テクスチャの中心点は +Z 面の中心点とする。

#if UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED

    // 事前計算テクスチャからキューブマップのUV座標を得る
    float2 pos = tex2D(ULI_CubeTransTexSampler, tex).rg;

#else // UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED

    // V 成分は視線ベクトルとXZ平面との角度に線形対応
    // V==0.0 => -π/2
    // V==0.5 => 0
    // V==1.0 => +π/2
    float rv = (tex.y - 0.5f) * UE4LIKEIBL_PI;

    // U 成分はXZ平面上における視線ベクトルと Z 軸との角度に線形対応
    // U==0.0 => -π
    // U==0.5 => 0
    // U==1.0 => +π
    float ru = (tex.x - 0.5f) * UE4LIKEIBL_PI * 2;

    // 視線ベクトル作成
    float cos_rv = cos(rv);
    float3 v = float3(cos_rv * sin(ru), -sin(rv), cos_rv * cos(ru));

    // 各面上における [(-1, -1), (+1, +1)] 座標と
    // オフスクリーンレンダーターゲット上の各面への平行移動量を決定
    float2 pos = float2(0, 0);
    float2 trans = float2(0, 0);
    float3 av = abs(v);
    if (av.z > av.x && av.z > av.y)
    {
        if (v.z < 0)
        {
            // -Z
            pos = float2(-v.x, v.y) / av.z;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_NZ;
        }
        else
        {
            // +Z
            pos = float2(v.x, v.y) / av.z;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_PZ;
        }
    }
    else if (av.y > av.x)
    {
        if (v.y < 0)
        {
            // -Y
            pos = float2(v.x, v.z) / av.y;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_NY;
        }
        else
        {
            // +Y
            pos = float2(v.x, -v.z) / av.y;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_PY;
        }
    }
    else
    {
        if (v.x < 0)
        {
            // -X
            pos = float2(v.z, v.y) / av.x;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_NX;
        }
        else
        {
            // +X
            pos = float2(-v.z, v.y) / av.x;
            trans = UE4LIKEIBL_ENVMAP_CUBE_TRANS_PX;
        }
    }

    // キューブの各面位置へ移動
    pos = pos * (UE4LIKEIBL_ENVMAP_CUBE_SCALE) + trans;

    // UV座標系に変換
    pos.x = pos.x * 0.5f + 0.5f;
    pos.y = -pos.y * 0.5f + 0.5f;

#endif // UE4LIKEIBL_ENVMAP_TRANS_TEX_ENABLED

    // キューブマップからサンプリング
    return tex2D(EnvMapRTSampler, pos);
}

////////////////////////////////////////
// テクニック

/// @brief 描画先を環境マップテクスチャにするためのスクリプトマクロ。
/// @param[in] id テクスチャ識別ID。
#define UE4LIKEIBL_ENVMAP_RENDERCOLORTARGET_SCRIPT_DEF(id) \
    "RenderColorTarget0=ULI_EnvMap_" #id ";"

/// メインテクニック定義。
technique Effect <
    string Script =
        UE4LIKEIBL_ENVMAP_RENDERCOLORTARGET_SCRIPT_DEF(UE4LIKEIBL_ENVMAP_ID)
        "RenderDepthStencilTarget=DepthBuffer;"
        "ClearSetColor=ClearColor;"
        "ClearSetDepth=ClearDepth;"
        "Clear=Color;"
        "Clear=Depth;"
        "Pass=DrawEnvMap;"
        "RenderColorTarget0=;"
        "RenderDepthStencilTarget=;"; >
{
    pass DrawEnvMap < string Script = "Draw=Buffer;"; >
    {
        AlphaBlendEnable = false;
        VertexShader = compile vs_3_0 RunVS();
        PixelShader = compile ps_3_0 RunPS();
    }
}

// エッジ等は描画しない
technique EdgeTec < string MMDPass = "edge"; > { }
technique ShadowTec < string MMDPass = "shadow"; > { }
technique ZplotTec < string MMDPass = "zplot"; > { }
